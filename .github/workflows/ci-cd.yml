name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  JASPER_URL: ${{ secrets.JASPER_URL }}
  JASPER_USERNAME: ${{ secrets.JASPER_USERNAME }}
  JASPER_PASSWORD: ${{ secrets.JASPER_PASSWORD }}

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm run test:coverage
      env:
        NODE_ENV: test
        JASPER_URL: ${{ env.JASPER_URL || 'http://localhost:8080/jasperserver' }}
        JASPER_USERNAME: ${{ env.JASPER_USERNAME || 'jasperadmin' }}
        JASPER_PASSWORD: ${{ env.JASPER_PASSWORD || 'jasperadmin' }}
        JASPER_AUTH_TYPE: basic
        JASPER_SSL_VERIFY: false
        JASPER_DEBUG_MODE: false
        JASPER_TIMEOUT: 30000
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == 18
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
    
    - name: Validate environment variables
      run: npm run validate-env
      env:
        NODE_ENV: test
        JASPER_URL: ${{ env.JASPER_URL || 'http://localhost:8080/jasperserver' }}
        JASPER_USERNAME: ${{ env.JASPER_USERNAME || 'jasperadmin' }}
        JASPER_PASSWORD: ${{ env.JASPER_PASSWORD || 'jasperadmin' }}
        JASPER_AUTH_TYPE: basic
        JASPER_SSL_VERIFY: false
    
    - name: Validate configuration
      run: node scripts/validate-config.js --no-connection --quiet
      env:
        NODE_ENV: test
        JASPER_URL: ${{ env.JASPER_URL || 'http://localhost:8080/jasperserver' }}
        JASPER_USERNAME: ${{ env.JASPER_USERNAME || 'jasperadmin' }}
        JASPER_PASSWORD: ${{ env.JASPER_PASSWORD || 'jasperadmin' }}
        JASPER_AUTH_TYPE: basic
        JASPER_SSL_VERIFY: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level moderate
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Package application
      run: npm pack
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: npm-package
        path: '*.tgz'
        retention-days: 30





  deploy-npm:
    name: Deploy to NPM
    runs-on: ubuntu-latest
    environment: Actions
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'

    - name: Configure npm authentication
      run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Publish package
      run: npm publish --access public --otp=${{ secrets.NPM_OTP }}
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}



  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [deploy-npm]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      pull-requests: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: npm-package
    
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          ## Changes in ${{ steps.version.outputs.VERSION }}
          
          ### Installation
          
          **NPM:**
          ```bash
          npm install -g jasperreports-mcp-server@${{ steps.version.outputs.VERSION }}
          ```
          
          ### Configuration
          
          See the [configuration documentation](docs/configuration.md) for setup instructions.
          
          ### What's Changed
          
          - Full changelog available in [CHANGELOG.md](CHANGELOG.md)
        draft: false
        prerelease: false
        files: |
          ./jasperreports-mcp-server-${{ steps.version.outputs.VERSION }}.tgz
