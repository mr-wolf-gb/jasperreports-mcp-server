version: '3.8'

services:
  jasperreports-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: jasperreports-mcp-server
    restart: unless-stopped
    ports:
      - "${TEST_SERVER_PORT:-3000}:3000"
    environment:
      # JasperReports Server Configuration
      - JASPER_URL=${JASPER_URL:-http://localhost:8080/jasperserver}
      - JASPER_AUTH_TYPE=${JASPER_AUTH_TYPE:-basic}
      - JASPER_USERNAME=${JASPER_USERNAME:-jasperadmin}
      - JASPER_PASSWORD=${JASPER_PASSWORD:-jasperadmin}
      - JASPER_ORGANIZATION=${JASPER_ORGANIZATION:-}
      - JASPER_TIMEOUT=${JASPER_TIMEOUT:-30000}
      - JASPER_SSL_VERIFY=${JASPER_SSL_VERIFY:-true}
      - JASPER_DEBUG_MODE=${JASPER_DEBUG_MODE:-false}
      
      # Test Server Configuration
      - TEST_SERVER_ENABLED=${TEST_SERVER_ENABLED:-false}
      - TEST_SERVER_PORT=${TEST_SERVER_PORT:-3000}
      
      # Node.js Configuration
      - NODE_ENV=${NODE_ENV:-production}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      # Mount configuration files if needed
      - ./config:/app/config:ro
      # Mount logs directory
      - ./logs:/app/logs
    networks:
      - jasper-network
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Health check passed')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development service with hot reload
  jasperreports-mcp-server-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    container_name: jasperreports-mcp-server-dev
    restart: unless-stopped
    ports:
      - "${TEST_SERVER_PORT:-3000}:3000"
    environment:
      - JASPER_URL=${JASPER_URL:-http://localhost:8080/jasperserver}
      - JASPER_AUTH_TYPE=${JASPER_AUTH_TYPE:-basic}
      - JASPER_USERNAME=${JASPER_USERNAME:-jasperadmin}
      - JASPER_PASSWORD=${JASPER_PASSWORD:-jasperadmin}
      - JASPER_DEBUG_MODE=true
      - TEST_SERVER_ENABLED=true
      - NODE_ENV=development
      - LOG_LEVEL=debug
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - jasper-network
    profiles:
      - dev

networks:
  jasper-network:
    driver: bridge